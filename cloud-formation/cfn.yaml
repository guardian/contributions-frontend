---
  AWSTemplateFormatVersion: 2010-09-09
  Description: contributions-app
  Parameters:
    VpcId:
      Type: String
      Description: VpcId of your existing Virtual Private Cloud (VPC)
      Default: vpc-e6e00183
    Subnets:
      Type: CommaDelimitedList
      Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
      Default: subnet-cb91ae8d, subnet-a7b74ac2, subnet-179e8063
    Stack:
      Description: Applied directly as a tag ('membership', or 'memb-masterclasses')
      Type: String
    Stage:
      Description: Applied directly as a tag
      Type: String
      Default: PROD
    App:
      Description: Applied directly as a tag
      Type: String
      Default: contributions-frontend
    SiteDomain:
      Description: Site domain Name
      Type: String
    AllowedIngressIps:
      Description: IP address range (CIDR) that access the site (e.g. '77.91.248.0/21'- Internal Guardian, or '0.0.0.0/0' - the whole internet!)
      Type: String
      Default: 0.0.0.0/0
    InstanceType:
      Description: EC2 instance type
      Type: String
    AMI:
      Description: AMI ID
      Type: String
    ELBSSLCertificate:
      Description: ELB SSL Certificate ARN
      Type: String
    EmailSqsQueueArn:
      Description: The ARN of the email SQS queue
      Type: String
  Mappings:
    StageVariables:
      CODE:
        MaxInstances: 2
        MinInstances: 1
      PROD:
        MaxInstances: 6
        MinInstances: 3
  Resources:
    FrontendAutoScalingGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        AvailabilityZones: !GetAZs
        VPCZoneIdentifier: !Ref Subnets
        LaunchConfigurationName: !Ref FrontendLaunchConfig
        MinSize: !FindInMap [ StageVariables, !Ref Stage, MinInstances ]
        MaxSize: !FindInMap [ StageVariables, !Ref Stage, MaxInstances ]
        LoadBalancerNames:
          - !Ref ContributionsFrontendElasticLoadBalancer
        HealthCheckType: ELB
        HealthCheckGracePeriod: 300
        Tags:
          - Key: Stack
            Value: !Ref Stack
            PropagateAtLaunch: true
          - Key: App
            Value: !Ref App
            PropagateAtLaunch: true
          - Key: Stage
            Value: !Ref Stage
            PropagateAtLaunch: true
    FrontendLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        ImageId: !Ref AMI
        SecurityGroups:
          - !Ref InstanceSecurityGroup
        InstanceType: !Ref InstanceType
        IamInstanceProfile: !Ref ContributionsAppInstanceProfile
        AssociatePublicIpAddress: true
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -ev
            mkdir /etc/gu
            aws --region ${AWS::Region} s3 cp s3://contributions-private/${Stage}/contributions.private.conf /etc/gu
            chown ${App} /etc/gu/contributions.private.conf
            chmod 0600 /etc/gu/contributions.private.conf

            aws --region ${AWS::Region} s3 cp s3://membership-dist/${Stack}/${Stage}/${App}/${App}_1.0-SNAPSHOT_all.deb /tmp
            dpkg -i /tmp/${App}_1.0-SNAPSHOT_all.deb

            /opt/cloudwatch-logs/configure-logs application ${Stack} ${Stage} ${App} /var/log/${App}/application.log

    ContributionsAppRole:
      Type: AWS::IAM::Role
      Properties:
        Path: "/"
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: PrivateBucket
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action: s3:GetObject
                  Resource: arn:aws:s3:::contributions-private/*
          - PolicyName: PushMetrics
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - cloudwatch:PutMetricData
                  Resource: '*'
          - PolicyName: PushLogs
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - logs:*
                  Resource:
                    - arn:aws:logs:*:*:*
          - PolicyName: SqsMessages
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:GetQueueUrl
                    - sqs:SendMessage
                  Resource:
                    - !Ref EmailSqsQueueArn
          - PolicyName: UpdateSSHKeys
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action: s3:GetObject
                  Resource: arn:aws:s3:::github-public-keys/Membership-and-Subscriptions/*
    ContributionsAppInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: "/"
        Roles:
          - !Ref ContributionsAppRole
    ContributionsFrontendElasticLoadBalancer:
      Type: AWS::ElasticLoadBalancing::LoadBalancer
      Properties:
        Listeners:
          - LoadBalancerPort: 443
            InstancePort: 9000
            Protocol: HTTPS
            SSLCertificateId: !Ref ELBSSLCertificate
            PolicyNames:
              - CookieBasedPolicy
        SecurityGroups:
          - !Ref LoadBalancerSecurityGroup
        Subnets: !Ref Subnets
        HealthCheck:
          Target: HTTP:9000/healthcheck
          HealthyThreshold: 2
          UnhealthyThreshold: 2
          Interval: 10
          Timeout: 5
        ConnectionDrainingPolicy:
          Enabled: true
          Timeout: 60
        LBCookieStickinessPolicy:
          - CookieExpirationPeriod: 1800
            PolicyName: CookieBasedPolicy
    LoadBalancerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Permit incoming HTTP access on port 80, egress to port 9000
        VpcId: !Ref VpcId
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Ref AllowedIngressIps
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Ref AllowedIngressIps
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 80.254.158.92/32
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 80.254.146.68/32
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 9000
            ToPort: 9000
            CidrIp: 0.0.0.0/0
    InstanceSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Open up SSH access and enable HTTP access on the configured port
        VpcId: !Ref VpcId
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 77.91.248.0/21
          - IpProtocol: tcp
            FromPort: 9000
            ToPort: 9000
            CidrIp: 77.91.248.0/21
          - IpProtocol: tcp
            FromPort: 9000
            ToPort: 9000
            SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
