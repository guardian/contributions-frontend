## Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Keep this for continual Google Webmasters tools validation - https://support.google.com/webmasters/answer/35179
GET            /google740d86a82e4c4f9d.html     controllers.Assets.at(path="/public", file="google740d86a82e4c4f9d.html")
GET            /robots.txt                      controllers.Assets.at(path="/public", file="robots.txt")
GET            /favicon.ico                     controllers.Assets.at(path="/public", file="favicon.ico")
# Map static resources from the /public folder to the /assets URL path
GET            /assets/*file                    controllers.Assets.versioned(path="/public", file: Asset)


# Giraffe
GET            /                                controllers.Contributions.contributeRedirect
GET            /home                            controllers.Contributions.contributeRedirect
GET            /healthcheck                     controllers.Healthcheck.healthcheck
POST           /paypal/auth                     controllers.PaypalController.authorize
OPTIONS        /paypal/auth                     controllers.PaypalController.authorizeOptions

POST           /paypal/capture                  controllers.PaypalController.capturePayment
GET            /paypal/:countryGroup/execute    controllers.PaypalController.executePayment(countryGroup: CountryGroup, paymentId, token, PayerID, CMP: Option[String], INTCMP: Option[String], refererPageviewId: Option[String], refererUrl: Option[String],pvid: Option[String], bid: Option[String], ophanVisitId: Option[String], componentId: Option[String], componentType: Option[ComponentType], source: Option[AcquisitionSource], abTest: Option[AbTest], supportRedirect: Option[Boolean])
POST           /paypal/hook                     controllers.PaypalController.hook
POST           /:countryGroup/update-metadata   controllers.PaypalController.updateMetadata(countryGroup:CountryGroup)

POST           /stripe/pay                      controllers.StripeController.pay
OPTIONS        /stripe/pay                      controllers.StripeController.payOptions
POST           /stripe/hook                     controllers.StripeController.hook

GET            /ca                              controllers.Contributions.redirectToUk
GET            /nz                              controllers.Contributions.redirectToUk
GET            /int                             controllers.Contributions.redirectToUk
GET            /uk                              controllers.Contributions.contribute(countryGroup: CountryGroup?=CountryGroup.UK, error_code: Option[PaymentError]?=None)
GET            /au                              controllers.Contributions.contribute(countryGroup: CountryGroup?=CountryGroup.Australia, error_code: Option[PaymentError]?=None)
GET            /us                              controllers.Contributions.contribute(countryGroup: CountryGroup?=CountryGroup.US, error_code: Option[PaymentError]?=None)
GET            /eu                              controllers.Contributions.contribute(countryGroup: CountryGroup?=CountryGroup.Europe, error_code: Option[PaymentError]?=None)

GET            /:countryGroup/thank-you         controllers.Contributions.thanks(countryGroup: CountryGroup)
GET            /:countryGroup/post-payment      controllers.Contributions.postPayment(countryGroup: CountryGroup)

GET            /user/autofill                   controllers.UserController.autofill


GET            /components/epic/inline-payment  controllers.EpicComponentsController.inlinePayment()

